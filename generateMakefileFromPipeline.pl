#! /usr/bin/perl
#
use strict;
use warnings;

use YAML::XS qw/LoadFile/;
use Data::Dumper;

my $pipeline_config = shift @ARGV;
my $bricks_directory = 'bricks/';

my $config  = LoadFile($pipeline_config);

print "## THIS FILE HAS BEEN GENERATED BY 'makePipe v0.0' from $pipeline_config\n";

# Print all:
my @all = ();
print "\nall:";
foreach my $process (keys %{$config}) {
  my $brick = $config->{$process}->{brick};
  my $brick_file = "$bricks_directory/$brick.Makefile";
  if(!-e $brick_file) {
    print STDERR "brick $brick not found in bricks directory: $bricks_directory\n";
    next;
  } else {
    push(@all,$process);
    print " $process"; 
  }
}
print "\n.PHONY: all\n\n";

# Include "CORE" brick
#my $core_file = "$bricks_directory/CORE.Makefile";
#if(-e $core_file) {
#  open(my $fh, $core_file) or die ("Cannot open $core_file");
#  while(<$fh>) { print $_; } 
#  print "\n";
#} else {
#  die ("CORE.Makefile not found in $bricks_directory");
#}
#print "\n";
unshift(@all,"core");
$config->{core}->{brick} = "CORE";

# Print each process
my @clean = ();
my $vars = "##############################\n#          VARIABLES         #\n##############################\n\n";
my $rules = "##############################\n#            RULES           #\n##############################\n\n";
foreach my $process (@all) {
  my $brick = $config->{$process}->{brick};
  my $brick_file = "$bricks_directory/$brick.Makefile";

  open (my $fh,$brick_file) or die ("Cannot open $brick_file");
  $vars .= "# Process: $process, constructed from BRICK $brick\n";
  $rules .= "# Process: $process, constructed from BRICK $brick\n";
  while(<$fh>) {
    # Skip comments
    next if $_ =~ /^#/;
    # Skip blank lines
    next if $_ =~ /^\s*$/;
    #my($var,$value) = $_ =~ /^%%_(\S+)\s*=\s*(.*)$/;
    my($var,$value) = $_ =~ /^%%_(\S+)\s*=\s*(.*)$/;
    # If this line correspond to a variable assignement
    # we check if a new value is defined in the pipeline config
    if(defined $var && defined $value) {
      my $new_val = $config->{$process}->{config}->{$var};
      if(defined $new_val) {
        $value = $new_val;
      }
      $value =~ s/%%/$process/g;
      die ("Undef value for variable $var in process $process") if $value eq 'undef';
      $vars .= $process."_"."$var = $value\n";
    } else {
      $_ =~ s/%%/$process/g;
      $rules .= $_;
    } 
  }
  #print "\n";
  $vars .= "\n";
  $rules .= "\n";
}

# Print vars
print $vars;

# Print rules
print $rules;

# print clean target
print "clean: ".join(" ",map { $_."_clean" } @all),"\n";


# TODO add rm

#print Dumper($config);
